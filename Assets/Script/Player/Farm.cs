using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Farm : MonoBehaviour
{

    public static Farm instance;

    private readonly int LUCK_CONSTANT = 50;

    public Slider farmSlider;
    [SerializeField]
    private bool farmable;

    public List<Item> tempItem;


    #region Config

    public static readonly int COMMON_CHANCE = 68;
    public static readonly int RARE_CHANCE = 87;
    public static readonly int LEGENDARY_CHANCE = 97;

    public static readonly int COMMON_COST_MULTIPLIER = 1;
    public static readonly int RARE_COST_MULTIPLIER = 3;
    public static readonly int LEGENDARY_COST_MULTIPLIER = 12;
    public static readonly int ANCIENT_COST_MULTIPLIER = 60;

    #endregion


    private Item[] itemsCommon1 /*, itemsRare1, itemsLegendary1, itemsAncient1 */;
    private Item[] itemsCommon2 /*, itemsRare2, itemsLegendary2, itemsAncient2 */;
    private Item[] itemsCommon3 /*, itemsRare3, itemsLegendary3, itemsAncient3 */;
    private Item[] itemsCommon4 /*, itemsRare4, itemsLegendary4, itemsAncient4 */;
    private Item[] itemsCommon5 /*, itemsRare5, itemsLegendary5, itemsAncient5 */;

    private void Awake()
    {
        if (instance == null) instance = this;
        tempItem = new List<Item>();
        GetItemResources();
    }

    private void GetItemResources()
    {
        itemsCommon1 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/01");
        itemsCommon2 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/02");
        itemsCommon3 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/03");
        itemsCommon4 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/04");
        itemsCommon5 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/05");
    }

    public void Init(){
        ResetSlider();
        farmable = true;
    }

    public List<Item> GetTempItem(){
        return tempItem;
    }

    private void Update()
    {
        if(GameManager.instance.IsPlaying && farmable && !Inventory.instance.IsFull()){
            farmSlider.value += Time.deltaTime;
        }
        if(farmSlider.value >= farmSlider.maxValue && !Inventory.instance.IsFull()){
            ResetSlider();
            Roll();
            UIManager.instance.OnDiscover();
            UIManager.instance.OffFarm();
        }
    }

    private void ResetSlider(){
        tempItem.Clear();
        farmSlider.value = 0;
        farmable = false;
    }

    #region ROLL AND PICK

    public void Roll()
    {
        // Basic roll

        for (int i = 0; i < 1; i++){
            tempItem.Add(PickItemFromAsset());
        }

        // Luck it out
        for (int j = 0; j < 3; j++)
        {
            var luck = Random.Range(1, 101);
            var luckStats = PlayerManager.instance.GetStatsLuckValue();
            if(luck <= LUCK_CONSTANT + luckStats){
                tempItem.Add(PickItemFromAsset());
            }
        }
        RandomizeItemProps();
    }

    private void RandomizeItemProps(){
        foreach(Item item in tempItem){
            item.SetRarityRamdomly();
            item.SetForgeLevelRandomly();
        }
    }

    public Item PickItemFromAsset()
    {
        var r = Random.Range(0, 5);
        if (r == 0)
        {
            return itemsCommon1[Random.Range(0, itemsCommon1.Length)];
        }
        else if (r == 1)
        {
            return itemsCommon2[Random.Range(0, itemsCommon2.Length)];
        }
        else if (r == 2)
        {
            return itemsCommon3[Random.Range(0, itemsCommon3.Length)];
        }
        else if (r == 3)
        {
            return itemsCommon4[Random.Range(0, itemsCommon4.Length)];
        }
        else if (r == 4)
        {
            return itemsCommon5[Random.Range(0, itemsCommon5.Length)];
        }
        else
        {
            return itemsCommon1[Random.Range(0, itemsCommon1.Length)];
        }
    }


    #endregion

}
