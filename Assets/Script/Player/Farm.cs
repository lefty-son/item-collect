using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Farm : MonoBehaviour
{

    public static Farm instance;

    private readonly int LUCK_CONSTANT = 50;

    public Slider farmSlider;
    [SerializeField]
    private bool farmable;

    public List<GameItem> tempItem;

    private readonly int COMMON_CHANCE = 68;
    private readonly int RARE_CHANCE = 87;
    private readonly int LEGENDARY_CHANCE = 97;

    private Item[] itemsCommon1, itemsRare1, itemsLegendary1, itemsAncient1;
    private Item[] itemsCommon2, itemsRare2, itemsLegendary2, itemsAncient2;
    private Item[] itemsCommon3, itemsRare3, itemsLegendary3, itemsAncient3;
    private Item[] itemsCommon4, itemsRare4, itemsLegendary4, itemsAncient4;
    private Item[] itemsCommon5, itemsRare5, itemsLegendary5, itemsAncient5;

    private void Awake()
    {
        if (instance == null) instance = this;
        tempItem = new List<GameItem>();
        GetItemResources();
    }

    private void GetItemResources()
    {
        itemsCommon1 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/01");
        itemsCommon2 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/02");
        itemsCommon3 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/03");
        itemsCommon4 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/04");
        itemsCommon5 = Resources.LoadAll<Item>("Item/AutoGenerated/Common/05");

        itemsRare1 = Resources.LoadAll<Item>("Item/AutoGenerated/Rare/01");
        itemsRare2 = Resources.LoadAll<Item>("Item/AutoGenerated/Rare/02");
        itemsRare3 = Resources.LoadAll<Item>("Item/AutoGenerated/Rare/03");
        itemsRare4 = Resources.LoadAll<Item>("Item/AutoGenerated/Rare/04");
        itemsRare5 = Resources.LoadAll<Item>("Item/AutoGenerated/Rare/05");

        itemsLegendary1 = Resources.LoadAll<Item>("Item/AutoGenerated/Legendary/01");
        itemsLegendary2 = Resources.LoadAll<Item>("Item/AutoGenerated/Legendary/02");
        itemsLegendary3 = Resources.LoadAll<Item>("Item/AutoGenerated/Legendary/03");
        itemsLegendary4 = Resources.LoadAll<Item>("Item/AutoGenerated/Legendary/04");
        itemsLegendary5 = Resources.LoadAll<Item>("Item/AutoGenerated/Legendary/05");

        itemsAncient1 = Resources.LoadAll<Item>("Item/AutoGenerated/Ancient/01");
        itemsAncient2 = Resources.LoadAll<Item>("Item/AutoGenerated/Ancient/02");
        itemsAncient3 = Resources.LoadAll<Item>("Item/AutoGenerated/Ancient/03");
        itemsAncient4 = Resources.LoadAll<Item>("Item/AutoGenerated/Ancient/04");
        itemsAncient5 = Resources.LoadAll<Item>("Item/AutoGenerated/Ancient/05");



    }

    public void Init(){
        ResetSlider();
        farmable = true;
    }

    public List<GameItem> GetTempItem(bool shuffle){
        if(shuffle){
            foreach (var item in tempItem)
            {
                item.forgeLevel = Random.Range(0, 3);
            }
        }
        return tempItem;
    }

    private void Update()
    {
        if(GameManager.instance.IsPlaying && farmable && !Inventory.instance.IsFull()){
            farmSlider.value += Time.deltaTime;
        }
        if(farmSlider.value >= farmSlider.maxValue && !Inventory.instance.IsFull()){
            ResetSlider();
            Roll();
            UIManager.instance.OnDiscover();
            UIManager.instance.OffFarm();
        }
    }

    private void ResetSlider(){
        tempItem.Clear();
        farmSlider.value = 0;
        farmable = false;
    }

    #region ROLL AND PICK

    public void Roll()
    {
       

        // Basic roll

        for (int i = 0; i < 1; i++){
            var r = Random.Range(0, 100);
            if (r <= COMMON_CHANCE)
            {
                tempItem.Add(PickCommon());
            }
            else if (r <= RARE_CHANCE)
            {
                tempItem.Add(PickRare());
            }
            else if (r <= LEGENDARY_CHANCE)
            {
                tempItem.Add(PickLegendary());
            }
            else
            {
                tempItem.Add(PickAncient());
            }
        }

        // Luck it out
        for (int j = 0; j < 3; j++)
        {
            var luck = Random.Range(1, 101);
            var luckStats = PlayerManager.instance.GetStatsLuckValue();
            if(luck <= LUCK_CONSTANT + luckStats){
                var r = Random.Range(0, 100);
                if (r <= COMMON_CHANCE)
                {
                    tempItem.Add(PickCommon());
                }
                else if (r <= RARE_CHANCE)
                {
                    tempItem.Add(PickRare());
                }
                else if (r <= LEGENDARY_CHANCE)
                {
                    tempItem.Add(PickLegendary());
                }
                else
                {
                    tempItem.Add(PickAncient());
                }
            }
        }
    }

    public GameItem PickCommon()
    {
        var r = Random.Range(0, 5);
        if (r == 0)
        {
            return new GameItem(itemsCommon1[Random.Range(0, itemsCommon1.Length)]);
        }
        else if (r == 1)
        {
            return new GameItem(itemsCommon2[Random.Range(0, itemsCommon2.Length)]);
        }
        else if (r == 2)
        {
            return new GameItem(itemsCommon3[Random.Range(0, itemsCommon3.Length)]);
        }
        else if (r == 3)
        {
            return new GameItem(itemsCommon4[Random.Range(0, itemsCommon4.Length)]);
        }
        else if (r == 4)
        {
            return new GameItem(itemsCommon5[Random.Range(0, itemsCommon5.Length)]);
        }
        else
        {
            return new GameItem(itemsCommon1[Random.Range(0, itemsCommon1.Length)]);
        }
    }

    public GameItem PickRare()
    {
        var r = Random.Range(0, 5);
        if (r == 0)
        {
            return new GameItem(itemsRare1[Random.Range(0, itemsRare1.Length)]);
        }
        else if (r == 1)
        {
            return new GameItem(itemsRare2[Random.Range(0, itemsRare2.Length)]);
        }
        else if (r == 2)
        {
            return new GameItem(itemsRare3[Random.Range(0, itemsRare3.Length)]);
        }
        else if (r == 3)
        {
            return new GameItem(itemsRare4[Random.Range(0, itemsRare4.Length)]);
        }
        else if (r == 4)
        {
            return new GameItem(itemsRare5[Random.Range(0, itemsRare5.Length)]);
        }
        else
        {
            return new GameItem(itemsRare1[Random.Range(0, itemsRare1.Length)]);
        }
    }

    public GameItem PickLegendary()
    {
        var r = Random.Range(0, 5);
        if (r == 0)
        {
            return new GameItem(itemsLegendary1[Random.Range(0, itemsLegendary1.Length)]);
        }
        else if (r == 1)
        {
            return new GameItem(itemsLegendary2[Random.Range(0, itemsLegendary2.Length)]);
        }
        else if (r == 2)
        {
            return new GameItem(itemsLegendary3[Random.Range(0, itemsLegendary3.Length)]);
        }
        else if (r == 3)
        {
            return new GameItem(itemsLegendary4[Random.Range(0, itemsLegendary4.Length)]);
        }
        else if (r == 4)
        {
            return new GameItem(itemsLegendary5[Random.Range(0, itemsLegendary5.Length)]);
        }
        else
        {
            return new GameItem(itemsLegendary1[Random.Range(0, itemsLegendary1.Length)]);
        }
    }

    public GameItem PickAncient()
    {
        var r = Random.Range(0, 5);
        if (r == 0)
        {
            return new GameItem(itemsAncient1[Random.Range(0, itemsAncient1.Length)]);
        }
        else if (r == 1)
        {
            return new GameItem(itemsAncient2[Random.Range(0, itemsAncient2.Length)]);
        }
        else if (r == 2)
        {
            return new GameItem(itemsAncient3[Random.Range(0, itemsAncient3.Length)]);
        }
        else if (r == 3)
        {
            return new GameItem(itemsAncient4[Random.Range(0, itemsAncient4.Length)]);
        }
        else if (r == 4)
        {
            return new GameItem(itemsAncient5[Random.Range(0, itemsAncient5.Length)]);
        }
        else
        {
            return new GameItem(itemsAncient1[Random.Range(0, itemsAncient1.Length)]);
        }
    }

    #endregion

}
